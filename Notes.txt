2. слайд (введение)
----
- В ОС реального времени Embox, история которой берёт начало на нашем факультете...
  ...
  * Ранее в рамках моей курсовой работы для Embox была адаптирована библиотека Linux Kernel Library - сокр. LKL
    * она предоставляет программам доступ к функционалу ядра Linux с помощью специального программного интерфейса на уровне исходного кода

4. слайд (обзор)
----
- Эмуляция
  * готовит двоичное окружение == например, переводит аргументы из регистров в стек

5. слайд (архитектура, рисунок)
----
- Была разработана архитектура подсистемы слоя двоичной совместимости, работа которой представлена на слайде
...
✓ В рамках архитектуры предлагается дополнить процесс ОС признаком, указывающим на разрешение исполнять сис. выз. Linux
        ... поток исполнения переходит в подсистему Linux.
✓ В подсистеме Linux предлагается реализовать обработчик прерывания INT0x80
        ... перенаправляет сист. выз. Linux в библиотеку LKL, которую предлагается использовать в качестве паравиртуализируемого ядра Linux.
✓ Библиотека LKL в подсистеме будет инициализироваться, настраиваться и предварительно тестироваться
  * Каждый поток ОС имеет соответствующую ему задачу Linux в LKL...
  * ...поэтому LKL переключает свой контекст на ту задачу Linux, которая соответствует текущему потоку ОС
  * Если задачи Linux для текущего потока нет, то она создаётся и закрепляется за ним
    ** Так вот, данный механизм работал только для потоков, созданных в рамках одного процесса операционной системы.
      ✓ Мною был подготовлен набор изменений, расширяющих данный механизма для работы с разными процессами ОС.
      ✓ Этот же набор изменений требует, чтобы процесс ОС имел еще один дополнительный параметр в своей структуре -- ключ, по которому LKL сможет правильно переключать контекст.

-------------------------------------------------

7. слайд (тестирование и апробация)
----
- procfs --- специальная файловая система Linux, предназначенная для получения служебной информации о работе ядра

8. слайд (echo - Ubuntu)
----
- Для GNU/Linux была скомпилирована программа linux_echo, которая пишет в стандартный вывод передаваемую ей строку
- Программа успешно работает как в среде GNU/Linux ...

9. слайд (echo - Embox)
----
- ... так и будучи без изменений перенесённой в среду ОС Embox

10. слайд (ls /proc - Ubuntu)
----
- В этом примере программа linux_ls, выводящая содержимое каталога, работает в "родной" среде --- ОС Ubuntu
- В данном случае просматривается содержимое каталога /proc

11. слайд (ls /proc - Embox)
----
- И вот эта же программа, благодаря разработанной подсистеме, работает в Embox.

12. слайд (cat - Embox (/proc/devices))
----
- В этом примере программа linux_cat выводит содержимое файла /proc/devices, который генерируется ядром Linux динамичеки при каждом обращении
- Можно видеть предоставляемые паравиртуализированным ядром Linux устройства

13. слайд (cat - Embox (/proc/stat))
----
- Вот содержимое служебного файла stat, описывающего состояние ядра Linux

14. слайд (cat - Embox (/proc/slabinfo))
----
- И еще один пример чтения системной информации, на этот раз из файл slabinfo




Возможные вопросы
----
- Чем LKL отличается от LibOS и Userspace Linux? (см. lkl README.md)
UML требует, чтобы хостом была Linux-система. LibOS позволяет использовать только часть функционала ядра Linux в качестве библиотеки и, если не ошибаюсь, тоже требует Linux-хост.

- Почему нельзя просто портировать libc, зачем слой двоичной совместимости?
Будет требоваться модификация и перекомпиляция (как сказал в введении). Также, многие программы неявно зависят от реализации ядра Linux (например, от продемонстрированной procfs)

- Почему не получилось использовать ls, cat и echo из GNU/Linux?
В Embox нет поддержки динамической компоновки, а эти программы скомпонованы динамически против библиотеки GLIBC. Попытки скомпоновать что-то, использующее GLIBC, статически будут неудачны.

- А если бы была другая ОС, поддерживающая разделяемые библиотеки?
Было бы интересно проверить работоспособность, в теории не должно быть никаких блокировок -- программы бы обращались к библиотеке, а библиотека обращалась бы к реализованной подсистеме системными вызовами Linux. Правда, стоило бы начать с простой разделяемой библиотеки языка Си - какой-нибудь uClibc.
